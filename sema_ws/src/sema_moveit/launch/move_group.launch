<?xml version="1.0"?>
<launch>
  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb -x $(find ur10_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />      

  <!-- robot model -->
  <arg name="xacro_robot_model"     default="$(find sema_description)/urdf/ur10_vgc10.xacro"/>
  <arg name="vgc10_enabled"         default="false" />
  <arg name="conveyor_belt_enabled" default="false" />
  <arg name="oak_d_enabled"         default="false" />
  
  <!-- move_group settings -->
  <arg name="pipeline"                         default="ompl" />
  <arg name="allow_trajectory_execution"       default="true"/>
  <arg name="fake_execution"                   default="false"/>
  <arg name="max_safe_path_cost"               default="1"/>
  <arg name="jiggle_fraction"                  default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <arg name="capabilities"         default=""/>
  <arg name="disable_capabilities" default=""/>
  <!-- load these non-default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="capabilities" value="
                a_package/AwsomeMotionPlanningCapability
                another_package/GraspPlanningPipeline
                " />
  -->

  <!-- inhibit these default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="disable_capabilities" value="
                move_group/MoveGroupKinematicsService
                move_group/ClearOctomapService
                " />
  -->

  <arg name="load_robot_description" default="true" />
  <!-- load URDF, SRDF and joint_limits configuration -->
  <include file="$(find sema_moveit)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)" />
    <arg name="xacro_robot_model"      value="$(arg xacro_robot_model)" />
    <arg name="vgc10_enabled"          value="$(arg vgc10_enabled)" />
    <arg name="conveyor_belt_enabled"  value="$(arg conveyor_belt_enabled)" />
    <arg name="oak_d_enabled"          value="$(arg oak_d_enabled)" />
  </include>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find sema_moveit)/launch/$(arg pipeline)_planning_pipeline.launch"/>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find sema_moveit)/launch/trajectory_execution.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />
   
    <!-- Params for the octomap monitor -->
    <param name="octomap_resolution" type="double" value="0.025" />
    <param name="max_range" type="double" value="5.0" />
    
    
    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="capabilities" value="$(arg capabilities)"/>
    <param name="disable_capabilities" value="$(arg disable_capabilities)"/>


    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    
  </node>

</launch>
